{"version":3,"sources":["scripts/main.js"],"names":["newGameField","button","document","querySelector","messageWin","messageLose","messageStart","fieldRows","querySelectorAll","gameScore","size","score","isWin","gameField","move","event","key","left","right","down","up","row","col","addNumber","render","classList","remove","isPosibleToMove","removeEventListener","checkRows","hasDuplicates","forEach","some","cell","index","checkColumns","reverseRows","reverse","transposeGameField","map","x","colIndex","findEmptyCell","emptyCells","rowIndex","columnIndex","push","Math","floor","random","length","addEventListener","contains","replace","innerText","add","reset","randomX","randomY","newRow","filter","splice","concat","Array","fill","elem","children","textContent","className"],"mappings":"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","file":"main.ec0cf588.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nconst button = document.querySelector('.button');\r\nconst messageWin = document.querySelector('.message-win');\r\nconst messageLose = document.querySelector('.message-lose');\r\nconst messageStart = document.querySelector('.message-start');\r\nconst fieldRows = document.querySelectorAll('.field-row');\r\nconst gameScore = document.querySelector('.game-score');\r\n\r\nconst size = 4;\r\nlet score = 0;\r\nlet isWin = false;\r\nlet newGameField;\r\nlet gameField = [\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n];\r\n\r\n// eslint-disable-next-line no-shadow\r\nconst move = event => {\r\n  newGameField = [...gameField];\r\n\r\n  switch (event.key) {\r\n    case 'ArrowLeft':\r\n      left(newGameField);\r\n      break;\r\n\r\n    case 'ArrowRight':\r\n      right(newGameField);\r\n      break;\r\n\r\n    case 'ArrowDown':\r\n      down(newGameField);\r\n      break;\r\n\r\n    case 'ArrowUp':\r\n      up(newGameField);\r\n      break;\r\n\r\n    default:\r\n      return;\r\n  }\r\n\r\n  for (let row = 0; row < size; row++) {\r\n    for (let col = 0; col < size; col++) {\r\n      if (newGameField[row][col] !== gameField[row][col]) {\r\n        gameField = newGameField;\r\n        addNumber();\r\n        render();\r\n      }\r\n    }\r\n  }\r\n\r\n  if (isWin) {\r\n    messageWin.classList.remove('hidden');\r\n  }\r\n\r\n  if (!isPosibleToMove()) {\r\n    messageLose.classList.remove('hidden');\r\n    document.removeEventListener('keydown', move);\r\n  }\r\n};\r\n\r\nbutton.addEventListener('click', () => {\r\n  document.addEventListener('keydown', move);\r\n\r\n  if (button.classList.contains('start')) {\r\n    button.classList.replace('start', 'restart');\r\n    button.innerText = 'Restart';\r\n    messageStart.classList.add('hidden');\r\n  } else {\r\n    isWin = false;\r\n    reset();\r\n  }\r\n\r\n  addNumber();\r\n  addNumber();\r\n  render();\r\n});\r\n\r\nfunction checkRows() {\r\n  let hasDuplicates = false;\r\n\r\n  newGameField.forEach(row => {\r\n    if (row.some((cell, index) => cell === 0 || cell === row[index + 1])) {\r\n      hasDuplicates = true;\r\n    }\r\n  });\r\n\r\n  return hasDuplicates;\r\n}\r\n\r\nfunction checkColumns() {\r\n  let hasDuplicates = false;\r\n\r\n  newGameField.forEach(row => {\r\n    row.forEach((cell, index) => {\r\n      if (cell === row[index + 1]) {\r\n        hasDuplicates = true;\r\n      }\r\n    });\r\n  });\r\n\r\n  return hasDuplicates;\r\n}\r\n\r\nfunction reverseRows() {\r\n  newGameField.forEach(row => row.reverse());\r\n}\r\n\r\nfunction transposeGameField() {\r\n  newGameField = newGameField[0]\r\n    .map((x, colIndex) => newGameField.map(row => row[colIndex]));\r\n}\r\n\r\nfunction findEmptyCell() {\r\n  const emptyCells = [];\r\n\r\n  gameField.forEach((row, rowIndex) => {\r\n    row.forEach((cell, columnIndex) => {\r\n      if (cell === 0) {\r\n        emptyCells.push([rowIndex, columnIndex]);\r\n      }\r\n    });\r\n  });\r\n\r\n  return emptyCells[Math.floor(Math.random() * emptyCells.length)];\r\n}\r\n\r\nfunction isPosibleToMove() {\r\n  if (checkRows()) {\r\n    return true;\r\n  }\r\n\r\n  transposeGameField();\r\n\r\n  return checkColumns();\r\n}\r\n\r\nconst addNumber = () => {\r\n  const [randomX, randomY] = findEmptyCell();\r\n\r\n  gameField[randomX][randomY] = Math.random() < 0.9 ? 2 : 4;\r\n};\r\n\r\nconst left = () => {\r\n  if (!checkRows) {\r\n    return;\r\n  }\r\n\r\n  newGameField = newGameField.map(row => {\r\n    const newRow = row.filter(cell => cell !== 0);\r\n\r\n    newRow.forEach((cell, index) => {\r\n      if (cell === newRow[index + 1]) {\r\n        newRow[index] *= 2;\r\n        newRow.splice(index + 1, 1);\r\n        score += newRow[index];\r\n\r\n        if (newRow[index] === 2048) {\r\n          isWin = true;\r\n        }\r\n      }\r\n    });\r\n\r\n    return newRow.concat(Array(size - newRow.length).fill(0));\r\n  });\r\n};\r\n\r\nconst right = () => {\r\n  if (!checkRows) {\r\n    return;\r\n  }\r\n\r\n  reverseRows();\r\n  left();\r\n  reverseRows();\r\n};\r\n\r\nconst down = () => {\r\n  transposeGameField();\r\n  right();\r\n  transposeGameField();\r\n};\r\n\r\nconst up = () => {\r\n  transposeGameField();\r\n  left();\r\n  transposeGameField();\r\n};\r\n\r\nconst render = () => {\r\n  gameField.forEach((row, rowIndex) => {\r\n    row.forEach((cell, colIndex) => {\r\n      const elem = fieldRows[rowIndex].children[colIndex];\r\n\r\n      if (cell === 0) {\r\n        elem.textContent = '';\r\n        elem.className = 'field-cell';\r\n      } else {\r\n        elem.textContent = cell;\r\n        elem.className = `field-cell field-cell--${cell}`;\r\n      }\r\n    });\r\n  });\r\n\r\n  gameScore.textContent = score;\r\n};\r\n\r\nconst reset = () => {\r\n  score = 0;\r\n\r\n  gameField = [\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n  ];\r\n\r\n  if (!messageLose.classList.contains('hidden')) {\r\n    messageLose.classList.add('hidden');\r\n  }\r\n\r\n  if (!messageWin.classList.contains('hidden')) {\r\n    messageWin.classList.add('hidden');\r\n  }\r\n};\r\n"]}